---
- name: Setup Kubernetes 1.31 Cluster and Install Cilium
  hosts: all
  become: true
  tasks:

    # Step 1: Disable swap
    - name: Disable swap temporarily
      command: swapoff -a

        #    - name: Ensure swap is disabled in fstab
        #      ansible.builtin.replace:
        #        path: /etc/fstab
        #        regexp: '^(\S+\s+none\s+swap\s+sw\s+\d+\s+\d+)'
        #        replace: '#\1'
        #      notify: Reload fstab

        #    - name: Reload fstab
        #      command: mount -a
        #      when: fstab is changed

    # Step 2: Install prerequisites for Kubernetes repo
    - name: Install necessary packages for Kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present
        update_cache: yes

    # Step 3: Download Kubernetes signing key and add Kubernetes repository
    - name: Create /etc/apt/keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes signing key and convert it using gpg
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        executable: /bin/bash

    - name: Add Kubernetes repository
      ansible.builtin.shell: |
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | \
        tee /etc/apt/sources.list.d/kubernetes.list

    # Step 4: Update apt package index and install Kubernetes components
    - name: Update package index
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold kubelet, kubeadm, and kubectl versions
      command: apt-mark hold kubelet kubeadm kubectl

    # Step 5: Enable kubelet service
    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started

    # Step 6: Enable IPv4 forwarding for Kubernetes
    - name: Enable IPv4 packet forwarding
      copy:
        content: |
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        mode: '0644'

    - name: Apply sysctl changes
      command: sysctl --system

    # Step 7: Install containerd and configure SystemdCgroup
    - name: Install containerd
      apt:
        name: containerd
        state: present
     
    - name: Ensure /etc/containerd directory exists
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate and apply default containerd configuration
      ansible.builtin.shell: |
        sudo containerd config default | sudo tee /etc/containerd/config.toml
      args:
        executable: /bin/bash

    - name: Update containerd config to enable SystemdCgroup
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      notify: Restart containerd

    - name: Reload systemd manager configuration
      command: systemctl daemon-reload

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: yes
        state: started

  handlers:
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

- name: Initialize the Kubernetes Control-Plane Node and Install Cilium
  hosts: controller_group
  become: true
  tasks:
    # Step 8: Initialize the Kubernetes control-plane node

    - name: Initialize Kubernetes control-plane node
      command: kubeadm init --apiserver-advertise-address={{ hostvars[inventory_hostname]['ansible_host'] }}
      async: 3600  # Allow up to 1 hour for the task to complete
      poll: 0  # Start the task in the background and return immediately
      register: init_kubeadm_result
    
    - name: Wait for Kubernetes control-plane initialization to complete
      async_status:
        jid: "{{ init_kubeadm_result.ansible_job_id }}"
      register: init_kubeadm_status
      until: init_kubeadm_status.finished
      retries: 100  # Adjust this based on how long kubeadm init typically takes
      delay: 30  # Wait for 30 seconds between retries
    
    # Step 9: Set up kubectl for user
    - name: Create .kube directory for sudo user
      ansible.builtin.file:
        path: "/home/devopsokeke/.kube"
        state: directory
        mode: '0755'
      become: yes
      become_user: devopsokeke

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/devopsokeke/.kube/config"
        owner: devopsokeke
        group: devopsokeke
        mode: '0644'
        remote_src: yes  # Indicates that the file is on the remote host
      become: yes   

    - name: Set ownership of kubeconfig file to sudo user
      ansible.builtin.command: chown devopsokeke:devopsokeke /home/devopsokeke/.kube/config
      become: yes

    # Step 10: Install Cilium CLI and CNI
    - name: Download and install Cilium CLI
      shell: |
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
        CLI_ARCH=amd64
        if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz
        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
        rm cilium-linux-${CLI_ARCH}.tar.gz
        rm cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
      args:
        executable: /bin/bash

    - name: Wait for Kubernetes API server to be ready
      command: kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes
      register: result
      retries: 10
      delay: 15  # wait for 15 seconds between retries
      until: result.rc == 0
      become: yes

    - name: Install Cilium as CNI
      command: cilium install
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      become: yes   

    - name: Ensure Cilium is fully operational
      command: cilium status
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: cilium_status_full_output
      until: "'Cilium: OK' in cilium_status_full_output.stdout and 'Operator: OK' in cilium_status_full_output.stdout and 'Envoy DaemonSet: OK' in cilium_status_full_output.stdout"
      retries: 5
      delay: 15
      changed_when: false
    
    - name: Output Cilium status
      debug:
        msg: "{{ cilium_status_full_output.stdout }}"
